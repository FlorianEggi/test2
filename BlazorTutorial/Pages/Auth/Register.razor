@page "/"

@layout AuthLayout
@using Webshop.Shared.Models.Requests.Register
@using Newtonsoft.Json
@using MatBlazor
@inject Service authService
@inject NavigationManager navigationManager
@inject HttpClient Http


<MatCard>
    @*<div class="hidden-mdc-down">
        <MatIconButton Icon="exit_to_app" Class="float-left" />
        <MatIconButton Icon="home" Class="float-left" Link="/" />
    </div>*@

    <div class="logo">
        <a href="/" title="Holter Online"><img src="/images/logo.png" asp-append-version="true" style="width:250px;" /><br /></a>

        <br />

    </div>

    <EditForm Model="model" OnValidSubmit="RegisterUser">
        @*<RadzenCard>*@
        <DataAnnotationsValidator>

        </DataAnnotationsValidator>
        <ValidationSummary />


        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="model.mail" id="mail" Label="Email" Icon="person" IconTrailing="true" FullWidth="true" Required="true" tabindex="1"></MatTextField>
            </div>

            <div class="form-group">
                <MatTextField @bind-Value="model.password" Type="password" id="password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" tabindex="1"></MatTextField>
            </div>

            <div class="form-group">
                <MatButton class="float-right" Disabled="isBusy" Type="submit" Raised="true" tabindex="3">Login</MatButton>
                @*<MatCheckbox @bind-Value="model.RememberMe" class="filled-in chk-col-blue">Remember Me</MatCheckbox>*@
            </div>
            <hr />
        </fieldset>


        @*<label>Email</label>

            <label>Passwort</label>
            <RadzenPassword @bind-Value="model.password"></RadzenPassword>*@

        @*<label>Password bestätigen</label>
            <RadzenTextBox @bind-Value="model.ConfirmPassword"></RadzenTextBox>*@

        @*<hr />
            <RadzenButton Style="margin-bottom: 20px; width: 150px" ButtonType="Radzen.ButtonType.Submit" Text="Anmelden" ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2"
                          Disabled="isBusy">


            </RadzenButton>*@


        @*</RadzenCard>*@
    </EditForm>
</MatCard>

@*</div>
    </div>*@


@code {
    RegisterRequest model = new RegisterRequest();

    bool isBusy = false;
    string baseUrl = "https://www.online.holter.at/PGM4";


    public async Task<bool> RegisterUser()
    {
        isBusy = true;

        string serializedUser = JsonConvert.SerializeObject(model);
        Console.WriteLine(serializedUser);

        HttpRequestMessage httpRequestMessage = new HttpRequestMessage();

        httpRequestMessage.Method = new HttpMethod("POST");
        httpRequestMessage.RequestUri = new Uri("https://www.online.holter.at/PGM4/OD000R.PGM");
        httpRequestMessage.Content = new StringContent(serializedUser);//, System.Text.Encoding.UTF8, "application/x-www-form-urlencoded");
                                                                       // httpRequestMessage.Content = new StringContent(serializedUser);

        httpRequestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-www-form-urlencoded");


        // formContent.Headers.Add("Accept","Access-Control-Allow-Origin");
        var corsAttr = new Microsoft.AspNetCore.Cors.EnableCorsAttribute();


        var loginUrl = $"{baseUrl}/OD000R.PGM";


        var loginRequest = await authService.RegisterUserAsync(loginUrl, model);


        if (loginRequest.Status.ToString() == "OK")
        {



            Console.WriteLine(loginRequest.Data.Sessionid);


            //var sessionId = returnedUser.Data.Sessionid;


            navigationManager.NavigateTo("Home");
            isBusy = false;


        }
        else
        {
            isBusy = false;
        }


        #region DemoServiceRequests
        //var searchUrl = $"{baseUrl}/OD300R.PGM";
        //var req = await authService.SearchResponseAsync(searchUrl,null);

        //foreach (var item in req.Data.Searchresults)
        //{
        //    Console.WriteLine(item.Itemid + " " + item.Datanormname1);
        //}


        //var articleDetailUrl = $"{baseUrl}/OD310R.PGM";
        //var articleDetail = await authService.ArticleDetailResponseAsync(articleDetailUrl, null);

        //Console.WriteLine(articleDetail.Data.Datanormname1);




        //var shoppingCartListUrl = $"{baseUrl}/OD201R.PGM";
        //var shoppingCarts = await authService.ShoppingCartResponseAsync(shoppingCartListUrl);



        #endregion

        return await Task.FromResult(true);



    }

}